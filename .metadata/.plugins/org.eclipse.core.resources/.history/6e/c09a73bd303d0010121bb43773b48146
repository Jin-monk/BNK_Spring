package com.example.jpaEx04.config;

import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.security.config.annotation.web.builders.HttpSecurity;
import org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;
import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;
import org.springframework.security.web.SecurityFilterChain;

@Configuration
@EnableWebSecurity
public class SecurityConfig {

	@Bean
	BCryptPasswordEncoder bCryptPasswordEncoder() {
		return new BCryptPasswordEncoder();
	}
	
	@Bean
	SecurityFilterChain filterChain(HttpSecurity http) throws Exception{
		
		http.authorizeHttpRequests((auth) -> auth 
				.requestMatchers("/","/registMember","/regist").permitAll() 
				.requestMatchers("/member/**").hasAnyRole("ADMIN","MEMBER")
				.requestMatchers("/admin").hasRole("ADMIN")
				.anyRequest().authenticated()
				);
				/*
		* URL 별로 누가 접근 할수 있는지 설정하겠다는 뜻.	
		         * 특정 주소를 지정한다. permitAll 은 모두 접근 가능하다는 뜻. => 특정 주소로 들어오는 모든 사용자 접근 가능
				 * 특정 주소를 지정. 특정 권한이 있어야 접근이 가능하다. 지금은 ADMIN, MEMBER 임.
				 * 특정 주소를 지정. ADMIN 이여야만 접근가능.
				 * 위 조건에 해당되지 않는 모든 요청은 로그인 필요함.  
				 */
		
		http.formLogin((auth) -> auth
				.loginPage("/login")
				.loginProcessingUrl("/loginProc")
				.defaultSuccessUrl("/member/welcome")
				.failureUrl("/fail")
				.permitAll()
				);
		
				/*
		* 로그인 확면과 로그인 처리 흐름을 설정하겠다는 뜻.
				 * 사용자 정의 로그인 페이지
				 * 로그인 처리를 수행할 경로
				 * 로그인 성공 시 이동할 경로
				 * 로그인 실패 시 이동할 경로
				 * 로그인 페이지 자체는 모두 접근 가능
				 */
		
		http.csrf(csrf -> csrf.disable());
		
		return http.build();
	}
}
